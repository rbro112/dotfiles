#!/bin/bash
# This script is used as a base to realize the run/package scripts

# exit immediately if an error occurs
set -euo pipefail

# Expect the first argument to be the command (run or package)
command="$1"

# Expect the second argument to be the name of the module to run.
if [ "$2" ]; then
  moduleName="$(basename "$2")"
else
  echo "error: Enter the name of the application module to run"
  exit 1
fi

# Iterate through arguments after the second one (module name) since gradle requires them to be
# passed via an explicit flag.
escapedArguments=''
for arg in "${@:3}"; do
  # Wrap the argument in quotes and escape it
  arg="${arg//\\/\\\\}"
  arg="\"${arg//\"/\\\"}\""

  # The arguments must be comma separated and passed via the --args flag to gradle.
  # -z checks for the empty, initial case to start building the string.
  if [ -z "$escapedArguments" ]; then
    escapedArguments="--args=$arg"
  else
    escapedArguments="$escapedArguments $arg"
  fi
done

# Get the directory that this script is in so no matter where it is executed from we can still
# reference gradlew correctly.
kscriptsDir="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"

# Need to be in the Kscripts directory for ./gradlew to work
cd "$kscriptsDir"

# TODO: Would be nice to somehow remove the gradle output on failure, eg "* What went wrong..."
if [ -z "$escapedArguments" ]; then
  # Gradle errors out if an empty string is passed, so we can't pass args in the case where it is empty
  ./gradlew applications:"$moduleName":"$command" --quiet --console=plain
else
  ./gradlew applications:"$moduleName":"$command" --quiet --console=plain "$escapedArguments"
fi
